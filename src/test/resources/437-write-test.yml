

Converter:
    Rakamak:
        # Rakamak file name
        fileName: 'users.rak'
        # Rakamak use IP?
        useIP: false
        # Rakamak IP file name
        ipFileName: 'UsersIp.rak'
    CrazyLogin:
        # CrazyLogin database file name
        fileName: 'accounts.db'

DataSource:
    # What type of database do you want to use?
    # Valid values: sqlite, mysql
    backend: 'sqlite'
    # Enable database caching, should improve database performance
    caching: true
    # Database host address
    mySQLHost: '127.0.0.1'
    # Database port
    mySQLPort: '3306'
    # Username about Database Connection Infos
    mySQLUsername: 'authme'
    # Password about Database Connection Infos
    mySQLPassword: '123456'
    # Database Name, use with converters or as SQLITE database name
    mySQLDatabase: 'authme'
    # Table of the database
    mySQLTablename: 'authme'
    # Column of IDs to sort data
    mySQLColumnId: 'id'
    # Column for storing or checking players nickname
    mySQLColumnName: 'username'
    # Column for storing or checking players RealName
    mySQLRealName: 'realname'
    # Column for storing players passwords
    mySQLColumnPassword: 'password'
    # Column for storing players emails
    mySQLColumnEmail: 'email'
    # Column for storing if a player is logged in or not
    mySQLColumnLogged: 'email'
    # Column for storing players ips
    mySQLColumnIp: 'ip'
    # Column for storing players lastlogins
    mySQLColumnLastLogin: 'lastlogin'
    # Column for storing player LastLocation - X
    mySQLlastlocX: 'x'
    # Column for storing player LastLocation - Y
    mySQLlastlocY: 'y'
    # Column for storing player LastLocation - Z
    mySQLlastlocZ: 'z'
    # Column for storing player LastLocation - World Name
    mySQLlastlocWorld: 'world'
    # Enable this when you allow registration through a website
    mySQLWebsite: false

ExternalBoardOptions:
    # Column for storing players passwords salts
    mySQLColumnSalt: ''
    # Column for storing players groups
    mySQLColumnGroup: ''

Email:
    # Email SMTP server host
    mailSMTP: 'smtp.gmail.com'
    # Email SMTP server port
    mailPort: 465
    # Email account which sends the mails
    mailAccount: ''
    # Email account password
    mailPassword: ''
    # Recovery password length
    RecoveryPasswordLength: 8
    # Mail Subject
    mailSubject: 'Your new AuthMe password'
    # Like maxRegPerIP but with email
    maxRegPerEmail: 1
    # Recall players to add an email?
    recallPlayers: false
    # Delay in minute for the recall scheduler
    delayRecall: 5
    # Blacklist these domains for emails
    emailBlacklisted:
        - '10minutemail.com'
    # Whitelist ONLY these domains for emails
    emailWhitelisted: []
    # Send the new password drawn in an image?
    generateImage: false
    # The OAuth2 token
    emailOauth2Token: ''

Hooks:
    # Do we need to hook with multiverse for spawn checking?
    multiverse: true
    # Do we need to hook with BungeeCord?
    bungeecord: false
    # Do we need to disable Essentials SocialSpy on join?
    disableSocialSpy: false
    # Do we need to force /motd Essentials command on join?
    useEssentialsMotd: false
    # Do we need to cache custom Attributes?
    customAttributes: false

bungeecord:
    # Send player to this BungeeCord server after register/login
    server: ''

Protection:
    # Enable some servers protection (country based login, antibot)
    enableProtection: false
    # Countries allowed to join the server and register, see http://dev.bukkit.org/bukkit-plugins/authme-reloaded/pages/countries-codes/ for countries' codes
    # PLEASE USE QUOTES!
    countries:
        - 'US'
        - 'GB'
        - 'A1'
    # Countries not allowed to join the server and register
    # PLEASE USE QUOTES!
    countriesBlacklist: []
    # Do we need to enable automatic antibot system?
    enableAntiBot: false
    # Max number of player allowed to login in 5 secs before enable AntiBot system automatically
    antiBotSensibility: 5
    # Duration in minutes of the antibot automatic system
    antiBotDuration: 10

Purge:
    # If enabled, AuthMe automatically purges old, unused accounts
    useAutoPurge: false
    # Number of Days an account become Unused
    daysBeforeRemovePlayer: 60
    # Do we need to remove the player.dat file during purge process?
    removePlayerDat: false
    # Do we need to remove the Essentials/users/player.yml file during purge process?
    removeEssentialsFiles: false
    # World where are players.dat stores
    defaultWorld: 'world'
    # Do we need to remove LimitedCreative/inventories/player.yml, player_creative.yml files during purge process ?
    removeLimitedCreativesInventories: false
    # Do we need to remove the AntiXRayData/PlayerData/player file during purge process?
    removeAntiXRayFile: false
    # Do we need to remove permissions?
    removePermissions: false

Security:
    SQLProblem:
        # Stop the server if we can't contact the sql database
        # Take care with this, if you set this to false,
        # AuthMe will automatically disable and the server won't be protected!
        stopServer: true
    ReloadCommand:
        # /reload support
        useReloadCommandSupport: true
    console:
        # Remove spam from console?
        noConsoleSpam: false
        # Remove passwords from console?
        removePassword: true
    captcha:
        # Player need to put a captcha when he fails too lot the password
        useCaptcha: false
        # Max allowed tries before request a captcha
        maxLoginTry: 5
        # Captcha length
        captchaLength: 5
    stop:
        # Kick players before stopping the server, that allow us to save position of players
        # and all needed information correctly without any corruption.
        kickPlayersBeforeStopping: true
